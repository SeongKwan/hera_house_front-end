/** 
*** flex를 이용하여 요소를 가운데로 위치시키기
**/
@keyframes fadeInDown {
    from {
        opacity: 0;
        transform: translate3d(0, -10%, 0);
    }

    to {
        opacity: 1;
        transform: translate3d(0, 0, 0);
    }
}

@keyframes fadeOutUp {
    from {
        opacity: 1;
    }

    to {
        opacity: 0;
        transform: translate3d(0, -10%, 0);
    }
}

@mixin centerPosition {
    display: flex;
    justify-content: center;
    align-items: center;
}

@mixin fontKR {
    font-family: "Noto Sans KR", sans-serif;
}

@mixin fontEn {
    // font-family: 'Harmattan', sans-serif !important;
    // font-family: 'Gidugu', sans-serif !important;
    font-family: "Kulim Park", sans-serif !important;
}

@mixin shadow($z-depth: 1, $strength: 1, $color: black) {
    @if $z-depth==1 {
        box-shadow: 0 1px 3px rgba($color, $strength * 0.14), 0 1px 2px rgba($color, $strength * 0.24);
    }

    @if $z-depth==2 {
        box-shadow: 0 3px 6px rgba($color, $strength * 0.16), 0 3px 6px rgba($color, $strength * 0.23);
    }

    @if $z-depth==3 {
        box-shadow: 0 10px 20px rgba($color, $strength * 0.19), 0 6px 6px rgba($color, $strength * 0.23);
    }

    @if $z-depth==4 {
        box-shadow: 0 15px 30px rgba($color, $strength * 0.25), 0 10px 10px rgba($color, $strength * 0.22);
    }

    @if $z-depth==5 {
        box-shadow: 0 20px 40px rgba($color, $strength * 0.3), 0 15px 12px rgba($color, $strength * 0.22);
    }

    @if ($z-depth < 1) or ($z-depth > 5) {
        @warn "$z-depth must be between 1 and 5";
    }
}

@mixin clearfix {
    &::after {
        content: "";
        display: table;
        clear: both;
    }
}

@mixin transition {
    transition: all 0.3s ease;
}

@mixin transitionTime($time) {
    transition: all $time ease;
}

@mixin animated {
    animation-duration: 0.5s;
    animation-fill-mode: both;
}

@mixin fadeInDown {
    -webkit-animation-name: fadeInDown;
    animation-name: fadeInDown;
}

@mixin fadeOutUp {
    -webkit-animation-name: fadeOutUp;
    animation-name: fadeOutUp;
}

// Map with much breakpoints
$breakpoints: (
    // mobile
    "xs": 482px,
    // medium tablet
    "sm": 624px,
    // tablet
    "md": 812px,
    // hd monitor
    "lg": 1231px,
    // fhd monitor,
    "xl": 1682px
);

// Respond-To Mixin
@mixin media($size) {
    @if map-has-key($breakpoints, $size) {
        $value: map-get($breakpoints, $size);

        @media screen and (max-width: $value) {
            @content;
        }
    } @else {
        @warn "Unknown `#{$size}` in $breakpoints";
    }
}
